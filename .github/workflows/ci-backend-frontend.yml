name: "CI: Backend (Rubocop / RSpec), Frontend (ESLint / Prettier)"

on:
  push:

jobs:
  backend-ci:
    name: "Backend CI: Rubocop / RSpec"
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: sp2324sp2324
          POSTGRES_DB: secoma_db
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # GitHubリポジトリのコードをチェックアウト
      - uses: actions/checkout@v4

      # Rubyのセットアップ
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.4
          bundler-cache: true

      # バックエンドの依存関係をインストール
      - name: Install Dependencies
        run: bundle install
        working-directory: ./backend

      # データベースのセットアップ
      - name: Setup Database
        run: |
          bin/rails db:create RAILS_ENV=test
          bin/rails db:migrate RAILS_ENV=test
        working-directory: ./backend

      # Rubocopによるコード解析
      - name: Run Rubocop
        run: bundle exec rubocop -A
        working-directory: ./backend

      # RSpecによるテスト実行
      - name: Run RSpec
        run: bin/rspec
        working-directory: ./backend

  frontend-ci:
    name: "Frontend CI: ESLint / Prettier"
    runs-on: ubuntu-latest

    steps:
      # GitHubリポジトリのコードをチェックアウト
      - uses: actions/checkout@v4

      # Node.jsのセットアップ
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # フロントエンドの依存関係をキャッシュ
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # フロントエンドの依存関係をインストール
      - name: Install Dependencies
        run: npm ci --legacy-peer-deps
        working-directory: ./frontend

      # ESLintによるコードのリントと修正の実行
      - name: Run ESLint
        run: npm run lint:fix
        working-directory: ./frontend

      # Prettierによるコードフォーマットの実行
      - name: Run Prettier
        run: npm run format
        working-directory: ./frontend
